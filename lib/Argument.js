// Generated by CoffeeScript 1.3.3
(function() {
  var Argument, rw;

  rw = require("rw_ize");

  Argument = (function() {

    Argument.types = function() {
      var t, _ref;
      return (_ref = this._types_) != null ? _ref : this._types_ = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = ['splat', 'WORD', 'NUM', 'CHAR', 'ANY', 'true', 'true_or_false', 'false'];
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          t = _ref1[_i];
          _results.push(this[t]);
        }
        return _results;
      }).call(this);
    };

    Argument.escaped_end_period = /\\\.$/;

    Argument.regexp_types_used = /\!\>([^\s]+)\</g;

    Argument.regexp_any_type = /\!\>[^\s]+\</g;

    Argument.user_pattern_to_type = function(txt) {
      var t, val, _i, _len, _ref;
      _ref = Argument.types();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        if (t.user_pattern() === txt) {
          val = t;
        }
      }
      return val;
    };

    rw.ize(Argument);

    Argument.read_able("user_pattern", "type");

    Argument.read_write_able_bool("is_start", "is_end");

    function Argument(txt) {
      this.rw_data().user_pattern = txt;
      this.rw_data().type = Argument.user_pattern_to_type(txt);
      this.write("is_start", false);
      this.write("is_end", false);
    }

    Argument.prototype.is_splat = function() {
      if (this.is_plain_text()) {
        return false;
      }
      return (!!this.type().is_splat) && this.type().is_splat();
    };

    Argument.prototype.is_a_match_with = function(txt) {
      if (this.is_plain_text()) {
        return txt === this.user_pattern();
      } else {
        return this.type().is_a_match_with(txt);
      }
    };

    Argument.prototype.is_plain_text = function() {
      if (this.type()) {
        return false;
      } else {
        return true;
      }
    };

    Argument.splat = {
      is_splat: function() {
        return true;
      },
      d: {},
      user_pattern: function() {
        var _base, _ref;
        return (_ref = (_base = this.d).user_pat) != null ? _ref : _base.user_pat = "!>...<";
      },
      is_a_match_with: function(arr) {
        return arr.length !== 0;
      },
      convert: function(unk) {
        return unk;
      }
    };

    Argument.ANY = {
      d: {},
      user_pattern: function() {
        var _base, _ref;
        return (_ref = (_base = this.d).user_pat) != null ? _ref : _base.user_pat = "!>ANY<";
      },
      is_a_match_with: function(unk) {
        if (("" + unk).is_whitespace()) {
          return false;
        }
        return true;
      },
      convert: function(unk) {
        return unk;
      }
    };

    Argument["true"] = {
      d: {},
      user_pattern: function() {
        var _base, _ref;
        return (_ref = (_base = this.d).user_pat) != null ? _ref : _base.user_pat = "!>true<";
      },
      is_a_match_with: function(unk) {
        return ("" + unk) === "true";
      },
      convert: function(unk) {
        return true;
      }
    };

    Argument["false"] = {
      d: {},
      user_pattern: function() {
        var _base, _ref;
        return (_ref = (_base = this.d).user_pat) != null ? _ref : _base.user_pat = "!>false<";
      },
      is_a_match_with: function(unk) {
        return ("" + unk) === "false";
      },
      convert: function(unk) {
        return false;
      }
    };

    Argument.true_or_false = {
      d: {},
      user_pattern: function() {
        var _base, _ref;
        return (_ref = (_base = this.d).user_pat) != null ? _ref : _base.user_pat = "!>true_or_false<";
      },
      is_a_match_with: function(unk) {
        return ("" + unk) === "true" || ("" + unk) === "false";
      },
      convert: function(unk) {
        if (unk === "true") {
          return true;
        }
        return false;
      }
    };

    Argument.WORD = {
      d: {},
      user_pattern: function() {
        var _base, _ref;
        return (_ref = (_base = this.d).user_pat) != null ? _ref : _base.user_pat = "!>WORD<";
      },
      is_a_match_with: function(unk) {
        if (!unk.is_whitespace) {
          return false;
        }
        if (unk.is_whitespace()) {
          return false;
        }
        return !unk.is_whitespace();
      },
      convert: function(unk) {
        return unk.strip();
      }
    };

    Argument.NUM = {
      d: {},
      user_pattern: function() {
        var _base, _ref;
        return (_ref = (_base = this.d).user_pat) != null ? _ref : _base.user_pat = "!>NUM<";
      },
      is_a_match_with: function(unk) {
        return !isNaN(parseFloat(unk));
      },
      convert: function(unk) {
        return parseFloat(unk);
      }
    };

    Argument.CHAR = {
      d: {},
      user_pattern: function() {
        var _base, _ref;
        return (_ref = (_base = this.d).user_path) != null ? _ref : _base.user_path = "!>CHAR<";
      },
      is_a_match_with: function(unk) {
        if (!unk.strip) {
          return false;
        }
        return unk.strip().length === 1;
      },
      convert: function(unk) {
        return unk.strip();
      }
    };

    return Argument;

  })();

  module.exports = Argument;

}).call(this);
