// Generated by CoffeeScript 1.3.3
(function() {
  var Arguments_Match, funcy_perm, rw, surgeon;

  rw = require("rw_ize");

  funcy_perm = require("funcy_perm");

  surgeon = require("array_surgeon");

  Arguments_Match = (function() {

    rw.ize(Arguments_Match);

    Arguments_Match.read_able("list", "env", "line", "code", "line_arr", "slice_desc", "args");

    Arguments_Match.read_write_able_bool("is_a_match");

    Arguments_Match.extract_args = function(match, list) {
      var a, args, end, i, slice, start, _i, _len;
      start = match.slice_desc().start_index;
      end = match.slice_desc().end_index;
      slice = match.line_arr().slice(start, end);
      args = [];
      if (slice.length !== list.length) {
        throw new Error("Slice does not match list length. Check start and end positions.");
      }
      for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
        a = list[i];
        if (!a.is_plain_text()) {
          args.push(slice[i]);
        }
      }
      return args;
    };

    Arguments_Match.permutate = function(env, line_arr, code) {
      var clone, data_pos, group, i, ind, perms, raw_perms, str, _i, _j, _len, _len1;
      data_pos = (function() {
        var _i, _len, _results;
        _results = [];
        for (i = _i = 0, _len = line_arr.length; _i < _len; i = ++_i) {
          str = line_arr[i];
          if (env.is_name_of_data(str)) {
            _results.push(i);
          }
        }
        return _results;
      })();
      raw_perms = funcy_perm(data_pos).perm(function(val, i) {
        return -1;
      });
      perms = [];
      for (_i = 0, _len = raw_perms.length; _i < _len; _i++) {
        group = raw_perms[_i];
        clone = line_arr.slice(0);
        for (_j = 0, _len1 = group.length; _j < _len1; _j++) {
          ind = group[_j];
          if (ind !== -1) {
            clone[ind] = env.data(clone[ind]);
          }
        }
        perms.push(clone);
      }
      return perms;
    };

    function Arguments_Match(arg_list, env, line_n_code) {
      var code, combo, desc_slice, final_line_arr, find_func, finders, i, line, list, perms, v, _i, _len;
      line = line_n_code[0];
      code = line_n_code[1];
      this.rw_data().list = arg_list.list();
      this.rw_data().env = env;
      this.rw_data().line = line;
      this.rw_data().code = code;
      this.rw_data().args = [];
      perms = this.constructor.permutate(env, line, code);
      list = this.list();
      find_func = function(v, i) {
        return list[i] && list[i].is_a_match_with(v);
      };
      finders = (function() {
        var _i, _len, _ref, _results;
        _ref = this.list();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          _results.push(find_func);
        }
        return _results;
      }).call(this);
      final_line_arr = null;
      desc_slice = null;
      for (i = _i = 0, _len = perms.length; _i < _len; i = ++_i) {
        combo = perms[i];
        desc_slice = surgeon(combo).describe_slice(finders);
        if (desc_slice) {
          final_line_arr = combo;
          break;
        }
      }
      if (!final_line_arr) {
        return null;
      }
      this.rw_data().is_a_match = true;
      this.rw_data().line_arr = final_line_arr;
      this.rw_data().slice_desc = desc_slice;
      this.rw_data().args = this.constructor.extract_args(this, list);
    }

    return Arguments_Match;

  })();

  module.exports = Arguments_Match;

}).call(this);
