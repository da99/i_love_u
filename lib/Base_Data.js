// Generated by CoffeeScript 1.3.3
(function() {
  var block_list_i, list_noun;

  module.exports = {};

  module.exports.i_love_u = function(ilu) {
    var block_text_line_i;
    return block_text_line_i = new Var('Block_Text_Line_i', function(name, env, line) {
      var block, num, val;
      block = line.block();
      if (!block) {
        throw new Error("Block is not defined.");
      }
      num = parseInt(name.split('_').pop());
      return val = block.text_line(num);
    });
  };

  block_text_line_i.regexp(/^Block_Text_Line_[0-9]+$/);

  ilu.vars().push(block_text_line_i);

  block_list_i = new Var("Block_List_i", function(name, env, line) {
    var block, list, num, str, tokens, v, _i, _len;
    block = line.block();
    if (!block) {
      throw new Error("Block is not defined.");
    }
    num = parseInt(name.split('_').pop());
    str = block.text_line(num).strip();
    tokens = _.flatten(new englishy.Englishy(str + '.').to_tokens());
    list = [];
    for (_i = 0, _len = tokens.length; _i < _len; _i++) {
      v = tokens[_i];
      if (v.is_quoted()) {
        list.push(v.value());
      } else {
        list.push(env.get_if_data(function(mess) {
          mess.name(v.value());
          return mess.line(line);
        }));
      }
    }
    return list;
  });

  block_list_i.regexp(/^Block_List_[0-9]+$/);

  ilu.vars().push(block_list_i);

  list_noun = {
    is_a_noun: function() {
      return true;
    },
    target: function() {
      var _ref;
      return (_ref = this._target_) != null ? _ref : this._target_ = new humane_list();
    },
    insert: function(pos, val) {
      return this.target().push(pos, val);
    },
    values: function() {
      return this.target().values();
    }
  };

  ilu.vars().push(function(mess) {
    mess.name("List");
    return mess.value(list_noun);
  });

}).call(this);
