// Generated by CoffeeScript 1.3.3
(function() {
  var Base_Data, Base_Procs, Env, Var_List, englishy, rw, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  englishy = require('englishy');

  _ = require('underscore');

  rw = require('rw_ize');

  Base_Procs = require("i_love_u/lib/Base_Procs");

  Base_Data = require("i_love_u/lib/Base_Data");

  Var_List = require("i_love_u/lib/Var_List");

  exports.Env = Env = (function() {
    var arr, meth, meths, prop, v, _i, _j, _len, _len1, _ref;

    Env.Env_Names = ["Local-Env", "Outside-Env", "Outside-Local-Env", "Page-Env"];

    _ref = Env.Env_Names;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      v = _ref[_i];
      Env[v.replace(/-/g, '_')] = new Function("return \"" + v + "\";");
    }

    Env.validate_name = function(e) {
      if (!(__indexOf.call(this.Env_Names, e) >= 0)) {
        throw new Error("Invalid env: " + e);
      }
      return e;
    };

    Env.base = function() {
      var e;
      if (!this._base_) {
        e = new Env();
        Base_Procs.i_love_u(e);
        Base_Data.i_love_u(e);
        this._base_ = e;
      }
      return this._base_;
    };

    rw.ize(Env);

    Env.read_able("vars", "envs", "loop_total", "code", "original_code", "outside", "local");

    Env.read_write_able("address");

    function Env(yield_to) {
      this.base = {};
      this.base["vars"] = {
        "top-envs": [],
        "bottom-envs": [],
        "local-vars": []
      };
      this.base[Env.Local_Env()] = this;
      this.base["functions"] = [];
      this.base["ilu"] = {
        "loop_total": 0
      };
      if (yield_to) {
        yield_to(this);
      }
      this.read_var("top-envs").push(Env.base());
    }

    Env.prototype.vars = function() {
      return this.base["vars"];
    };

    Env.prototype.force_update_var = function(name, val) {
      return this.base["vars"][name] = val;
    };

    Env.prototype.force_delete_var = function(name, val) {
      return delete this.base["vars"][name];
    };

    Env.prototype.create_var = function(name, val) {
      var str;
      if (_.has(this.vars(), name)) {
        throw new Error("Var already defined: " + name);
      }
      switch (name) {
        case "code":
          str = val;
          if (!_.isString(str)) {
            str = str.text();
            this.vars()["original_code"] = str;
            this.vars()[name] = str.standardize();
            return this.vars()[name];
          }
          break;
        default:
          return this.vars()[name] = val;
      }
    };

    Env.prototype.has_var = function(name) {
      return _.has(this.base["vars"], name);
    };

    Env.prototype.require_var = function(name) {
      if (!this.has_var(name)) {
        throw new Error("Var not defined: " + name);
      }
      return this.base["vars"][name];
    };

    Env.prototype.read_var = function(name) {
      return this.require_var(name);
    };

    Env.prototype.update_var = function(name, val) {
      this.require_var(name);
      return this.base["vars"][name];
    };

    Env.prototype.delete_var = function(name) {
      this.require_var(name);
      return delete this.base["vars"][name];
    };

    meths = {
      'vars': ['get', 'get_if_data', 'run_line_tokens', 'push', 'push_name_and_value', 'update_name_and_value', 'delete']
    };

    for (prop in meths) {
      arr = meths[prop];
      for (_j = 0, _len1 = arr.length; _j < _len1; _j++) {
        meth = arr[_j];
        Env.prototype[meth] = new Function("return this.local()." + prop + "()." + meth + ".apply( this.local()." + prop + "(), Array.prototype.slice.apply(arguments) );");
      }
    }

    Env.prototype.is_an_env = function() {
      return true;
    };

    Env.prototype.read_from = function() {
      var env, _ref1;
      if ((_ref1 = this._read_from_) == null) {
        this._read_from_ = Env.Outside_Env();
      }
      if (arguments.length === 1) {
        env = arguments[0];
        this.constructor.throw_unless_valid_env(env);
        this._read_from_ = e;
      }
      return this._read_from_;
    };

    Env.prototype.write_to = function() {
      var env, _ref1;
      if ((_ref1 = this._write_to_) == null) {
        this._write_to_ = Env.Local_Env();
      }
      if (arguments.length === 1) {
        env = arguments[0];
        this.constructor.throw_unless_valid_env(env);
        this._write_to_ = e;
      }
      return this._write_to_;
    };

    Env.prototype.has_outside = function() {
      var _base;
      return (!!this.outside()) && (typeof (_base = this.outside()).is_an_env === "function" ? _base.is_an_env() : void 0);
    };

    Env.prototype.is_page = function() {
      return !!this.address();
    };

    Env.prototype.is_local_only = function() {
      return this.is_read_local() && this.is_write_local();
    };

    Env.prototype.is_read_local = function() {
      return this.read_from() === Env.Local_Env();
    };

    Env.prototype.is_write_local = function() {
      return this.write_to() === Env.Local_Env();
    };

    Env.prototype.record_loop = function(text) {
      this.loop_total(this.loop_total() + 1);
      if (this.loop_total() > LOOP_LIMIT) {
        throw new Error("Loop limit exceeded " + LOOP_LIMIT + " using: " + text + ".");
      }
      return this.loop_total();
    };

    Env.prototype.run = function() {
      var end, i, line, line_and_block, lines, match, _k, _len2;
      lines = (new englishy.Englishy(this.code())).to_tokens();
      for (i = _k = 0, _len2 = lines.length; _k < _len2; i = ++_k) {
        line_and_block = lines[i];
        match = this.run_line_tokens(line_and_block);
        if ((!(typeof match.is_a_match === "function" ? match.is_a_match() : void 0)) || !(typeof match.is_full_match === "function" ? match.is_full_match() : void 0)) {
          end = line_and_block[1] ? ":" : ".";
          line = "" + (englishy.Stringy.to_strings(line_and_block[0]).join(" ")) + end;
          if (!(typeof match.is_a_match === "function" ? match.is_a_match() : void 0)) {
            throw new Error("No match for: " + line);
          }
          if (match && !match.is_full_match()) {
            throw new Error("No full match: " + line + " => " + (match.line().line().join(" ")) + end);
          }
        }
      }
      return true;
    };

    return Env;

  })();

}).call(this);
