// Generated by CoffeeScript 1.3.3
(function() {
  var Argument, Argument_List, rw, _;

  _ = require("underscore");

  rw = require("rw_ize");

  Argument = require("i_love_u/lib/Argument");

  Argument_List = (function() {

    rw.ize(Argument_List);

    Argument_List.read_able("list");

    Argument_List.extract_args = function(match, list) {
      var a, args, end, i, slice, start, _i, _len;
      start = match.slice_description.start_index;
      end = match.slice_description.end_index;
      slice = match.line_arr.slice(start, end);
      args = [];
      if (slice.length !== list.length) {
        throw new Error("Slice does not match list length. Check start and end positions.");
      }
      for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
        a = list[i];
        if (!a.is_plain_text()) {
          args.push(slice[i]);
        }
      }
      return args;
    };

    Argument_List.permutate = function(env, line, code) {
      var clone, data_pos, group, i, ind, line_arr, perms, raw_perms, str, _i, _j, _len, _len1;
      line_arr = line.strip().whitespace_split();
      data_pos = (function() {
        var _i, _len, _results;
        _results = [];
        for (i = _i = 0, _len = line_arr.length; _i < _len; i = ++_i) {
          str = line_arr[i];
          if (env.has_data(str)) {
            _results.push(i);
          }
        }
        return _results;
      })();
      raw_perms = funy_perm(data_pos).perm(function(val, i) {
        return -1;
      });
      perms = [];
      for (_i = 0, _len = raw_perms.length; _i < _len; _i++) {
        group = raw_perms[_i];
        clone = line_arr.clone;
        for (_j = 0, _len1 = group.length; _j < _len1; _j++) {
          ind = group[_j];
          if (ind !== -1) {
            clone[ind] = env.data(clone[ind]);
          }
        }
        perms.push(clone);
      }
      return perms;
    };

    function Argument_List(raw_str) {
      var str, v;
      str = raw_str.strip();
      this.rw_data().list = (function() {
        var _i, _len, _ref, _results;
        _ref = str.whitespace_split();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          _results.push(new Argument(v));
        }
        return _results;
      })();
      if (str.has_end_period() || str.has_end_colon()) {
        _.first(this.list()).is_start(true);
        _.last(this.list()).is_end(true);
      }
    }

    Argument_List.prototype.compile = function(env, line, code) {
      var match;
      match = new Arguments_Match(this, env, line, code);
      if (!match.is_a_match()) {
        return null;
      }
      return match;
    };

    return Argument_List;

  })();

  module.exports = Argument_List;

}).call(this);
