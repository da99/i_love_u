// Generated by CoffeeScript 1.3.3
(function() {
  var Arguments_Match, Line, Message, Var, Var_List, rw, _;

  rw = require("rw_ize");

  _ = require("underscore");

  Var = require("i_love_u/lib/Var");

  Line = require("i_love_u/lib/Line");

  Arguments_Match = require("i_love_u/lib/Arguments_Match");

  Message = (function() {

    rw.ize(Message);

    Message.read_write_able_bool("is_done");

    Message.read_write_able("action");

    Message.read_able("name", "var", "value", "origin_env", "line", "write_to");

    function Message(yield_to) {
      yield_to(this);
    }

    Message.prototype.is_a_message = function() {
      return true;
    };

    Message.prototype.action = function() {
      var _ref;
      if (arguments.length !== 0) {
        this.write("action", arguments[0]);
        if (!((_ref = this.read("action")) === "reading" || _ref === "writing")) {
          throw new Error("Unknown action: " + arguments[0]);
        }
      }
      return this.read("action");
    };

    Message.prototype.name = function() {
      if (arguments.length !== 0) {
        this.write("name", arguments[0]);
      }
      if (!this.read("name") && this["var"]()) {
        return this["var"]().name();
      }
      return this.read("name");
    };

    Message.prototype["var"] = function() {
      if (arguments.length !== 0) {
        this.write("var", arguments[0]);
      }
      return this.read("var");
    };

    Message.prototype.value = function(val) {
      if (arguments.length === 1) {
        this["var"](new Var(this.name(), val));
      }
      return this["var"]();
    };

    Message.prototype.origin_env = function() {
      if (arguments.length !== 0) {
        this.write("origin_env", arguments[0]);
      }
      if (!this.read("origin_env") && this.line()) {
        return this.line().calling_env();
      }
      return this.read("origin_env");
    };

    Message.prototype.line = function() {
      if (arguments.length !== 0) {
        this.write("line", arguments[0]);
      }
      return this.read("line");
    };

    Message.prototype.write_to = function() {
      if (arguments.length !== 0) {
        this.write("write_to", Env.throw_unless_valid_env(arguments[0]));
      }
      if (!this.read("write_to")) {
        if (this.origin_env()) {
          return this.origin_env().write_to();
        } else {
          throw new Error("No write_to or origin_env specified.");
        }
      }
      return this.read("write_to");
    };

    return Message;

  })();

  Var_List = (function() {

    Var_List.counter = 0;

    rw.ize(Var_List);

    Var_List.read_able("env", "object_id", "vars", "procs", "pattern_based");

    function Var_List(env) {
      this.rw('env', env);
      this.rw('object_id', ++Var_List.counter);
      this.rw('kv', {});
      this.rw('procs', []);
      this.rw('pattern_based', {});
    }

    Var_List.prototype.is_a_var_list = function() {
      return true;
    };

    Var_List.prototype.array = function(type) {
      var arr, k, v, vars;
      if (arguments.length === 0) {
        type = 'all';
      }
      vars = (function() {
        var _ref, _ref1, _ref2, _results, _results1;
        switch (type) {
          case 'vars':
          case 'var_values':
            arr = [];
            _ref = this.kv();
            for (k in _ref) {
              v = _ref[k];
              if (v.is_user_defined()) {
                if (type === 'var_values') {
                  arr.push(v.value());
                } else {
                  arr.push(v);
                }
              }
            }
            return arr;
          case 'procedures':
            _ref1 = this.kv();
            _results = [];
            for (k in _ref1) {
              v = _ref1[k];
              if (typeof v.is_a_procedure === "function" ? v.is_a_procedure() : void 0) {
                _results.push(v);
              }
            }
            return _results;
          case 'all':
            _ref2 = this.kv();
            _results1 = [];
            for (k in _ref2) {
              v = _ref2[k];
              _results1.push(v);
            }
            return _results1;
          default:
            throw new Error("Unknown var type: " + type);
        }
      }).call(this);
      if (!this.env().is_read_local()) {
        vars = this.env().read().vars().array(type).concat(vars);
      }
      return vars;
    };

    Var_List.prototype.to_message = function() {
      var f, m, name, unk;
      unk = arguments[0];
      if (_.isString(unk)) {
        name = unk;
        unk = function(mess) {
          return mess.name(name);
        };
      }
      m = (typeof unk.is_a_message === "function" ? unk.is_a_message() : void 0) ? unk : new Message(function(mess) {
        unk(mess);
        if (!mess.calling_env()) {
          return mess.calling_env(this.env());
        }
      });
      f = arguments[1];
      if (f) {
        f(m);
      }
      return m;
    };

    Var_List.prototype.has_named = function(yield_to) {
      return this.find_for(yield_to).is_done();
    };

    Var_List.prototype.find_for_or_throw = function(unk) {
      var i;
      i = this.find_for(unk);
      if (i.is_done()) {
        return i;
      }
      throw new Error("No var named: " + (i.name()));
    };

    Var_List.prototype.find_for = function(unk) {
      var action, calling_env, m, name, v;
      m = this.to_message(unk);
      action = m.action();
      name = m.name();
      calling_env = m.calling_env();
      v = this.kv()[name] ? this.kv()[name] : m.is_for_reading() ? _.find(this.pattern_based(), function(_v_) {
        return _v_.is_named(name);
      }) : void 0;
      if (v && v.is_local_only() && calling_env !== this.env()) {
        v = void 0;
      }
      if (v) {
        m["var"](v);
        m.list(this);
        m.is_done(true);
        return m;
      }
      if (!this.env().is_write_local()) {
        m = this.env().write().find_for(m);
        if (m.is_done()) {
          return m;
        }
      }
      if (m.is_for_reading() && !this.env().is_read_local()) {
        m = this.env().read().find_for(m);
        if (m.is_done()) {
          return m;
        }
      }
      return m;
    };

    Var_List.prototype.get_or_throw = function(yield_to) {
      return this.find_for_or_throw(yield_to)["var"]();
    };

    Var_List.prototype.get_if_data = function(yield_to) {
      var m;
      m = this.find_for(yield_to);
      if (m.is_done()) {
        return m["var"]();
      } else {
        return m.name();
      }
    };

    Var_List.prototype.get = function(yield_to) {
      var i;
      i = this.find_for(yield_to);
      return i.is_done() && i["var"]();
    };

    Var_List.prototype.push_name_and_value = function(n, v) {
      return this.push(function(mess) {
        mess.name(n);
        return mess.value(v);
      });
    };

    Var_List.prototype.push = function(yield_to) {
      var m, name, proc, v, _var_;
      if (typeof yield_to.is_a_var === "function" ? yield_to.is_a_var() : void 0) {
        _var_ = yield_to;
        yield_to = function(mess) {
          return mess["var"](_var_);
        };
      }
      m = this.to_message(yield_to, function(mess) {
        return mess.action("writing");
      });
      if (!this.env().is_write_local()) {
        return this.env().envs().write().push(m);
      }
      if (this.find_for(m).is_done()) {
        throw new Error("Name for var already defined: " + (old.name()));
      }
      v = m["var"]();
      name = m.name();
      proc = v.value();
      this.kv()[name] = v;
      m.is_done(true);
      if (typeof proc.is_a_procedure === "function" ? proc.is_a_procedure() : void 0) {
        switch (proc.position()) {
          case 'top':
            this.procs().unshift(proc);
            break;
          case 'middle':
            this.procs().splice(Math.ceil(this.procs().length / 2), 0, proc);
            break;
          case 'bottom':
            this.procs().push(proc);
            break;
          default:
            throw new Error("Unknown position for \"" + (proc.pattern()) + "\": " + (proc.position()));
        }
      }
      return m["var"]();
    };

    Var_List.prototype.update = function(yield_to) {
      var m;
      m = this.to_message(yield_to, function(mess) {
        return mess.action("writing");
      });
      this.find_for_or_throw(m).list().kv()[name] = m["var"]();
      m.is_done(true);
      return m["var"]();
    };

    Var_List.prototype["delete"] = function(yield_to) {
      var i, m, p, proc, proc_list, _i, _len;
      m = this.to_message(yield_to, function(mess) {
        return mess.action("writing");
      });
      m = this.find_for_or_throw(m);
      delete m.list()[m.name()];
      proc = m["var"]();
      proc_list = m.list().procs();
      if (typeof proc.is_a_procedure === "function" ? proc.is_a_procedure() : void 0) {
        for (i = _i = 0, _len = proc_list.length; _i < _len; i = ++_i) {
          p = proc_list[i];
          if (p === proc) {
            break;
          }
        }
        if (i > -1) {
          proc_list.splice(i, 1);
        }
      }
      return m["var"]();
    };

    Var_List.prototype.run_line_tokens = function(pair) {
      var is_any_match, is_full_match, line, match, me, partial_match, proc, _i, _len, _ref;
      match = new Arguments_Match(new Line(pair, this.env()));
      if (!this.env().is_read_local()) {
        match = this.env().envs().read().run_line_tokens(pair);
      }
      if (typeof match.is_full_match === "function" ? match.is_full_match() : void 0) {
        return match;
      }
      me = this;
      if (match) {
        line = match.line();
        is_full_match = match.is_full_match();
        partial_match = match.is_a_match();
      } else {
        line = new Line(pair, env);
        is_full_match = false;
        partial_match = false;
      }
      while (true) {
        is_any_match = false;
        _ref = this.procs();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          proc = _ref[_i];
          while (true) {
            match = new Arguments_Match(line, proc);
            if (!match.is_a_match()) {
              break;
            }
            partial_match = is_any_match = true;
            if (match.is_full_match()) {
              is_full_match = true;
              break;
            }
          }
          if (is_full_match) {
            break;
          }
        }
        if (is_full_match) {
          break;
        }
        if (!is_any_match) {
          break;
        }
      }
      return match;
    };

    return Var_List;

  })();

  module.exports = Var_List;

}).call(this);
