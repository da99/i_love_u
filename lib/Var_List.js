// Generated by CoffeeScript 1.3.3
(function() {
  var Var, Var_List, rw, _,
    __slice = [].slice;

  rw = require("rw_ize");

  _ = require("underscore");

  Var = require("i_love_u/lib/Var");

  Var_List = (function() {

    Var_List.counter = 0;

    rw.ize(Var_List);

    Var_List.read_able("env", "object_id", "vars", "procs", "pattern_based");

    function Var_List(env) {
      this.rw('env', env);
      this.rw('object_id', ++Var_List.counter);
      this.rw('vars', {});
      this.rw('procs', []);
      this.rw('pattern_based', {});
    }

    Var_List.prototype.is_a_var_list = function() {
      return true;
    };

    Var_List.prototype.has_named = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return !!this.get.apply(this, args);
    };

    Var_List.prototype.get_or_throw = function(name) {
      return this.get(name) || (function() {
        throw new Error("Variable not found: " + name);
      })();
    };

    Var_List.prototype.get_if_data = function(name, line) {
      if (!(typeof line.is_a_line === "function" ? line.is_a_line() : void 0)) {
        throw new Error("Line is required.");
      }
      return get(name, line) || name;
    };

    Var_List.prototype.get = function(name, line) {
      var calling_env, target;
      calling_env = line.env();
      target = null;
      if (!this.env().env_list().is_local_read()) {
        target = this.env().env_list().read().get(name, line);
      }
      if (!target) {
        target = this.vars[name] ? this.vars[name] : _.find(this.pattern_based(), function(v) {
          return v.is_named(name);
        });
      }
      if ((!target.is_import_able()) && target.env() !== calling_env) {
        target = void 0;
      }
      return target;
    };

    Var_List.prototype.push_name_and_value = function(name, val) {
      if (arguments.length !== 2) {
        throw new Error("Arguments length can only be 2: " + arguments);
      }
      return this.push(new Var(name, val));
    };

    Var_List.prototype.push = function(v) {
      var proc;
      if (!this.to_local()) {
        return this.env().push(v);
      }
      v.belongs_to(this.object_id());
      if (this.vars()[v.name()]) {
        throw new Error("Name for var already defined: " + (v.name()));
      }
      this.vars()[v.name()] = v;
      if (v.value().is_a_procedure()) {
        proc = v.value();
        switch (proc.position()) {
          case 'top':
            this.procs().unshift(proc);
            break;
          case 'middle':
            this.procs().splice(Math.ceil(this.procs().length / 2), 0, proc);
            break;
          case 'bottom':
            this.procs().push(proc);
            break;
          default:
            throw new Error("Unknown position for \"" + (proc.pattern()) + "\": " + (proc.position()));
        }
      }
      return v;
    };

    Var_List.prototype.remove = function(n) {
      var i, p, proc, val, _i, _len, _ref;
      if (!this.to_local()) {
        return this.scope.remove(n);
      }
      if (!this.is_named(n)) {
        throw new Error("Not found: " + n);
      }
      val = this.vars()[n];
      delete this.vars()[n];
      proc = val && val.value();
      if (typeof proc.is_a_procedure === "function" ? proc.is_a_procedure() : void 0) {
        _ref = this.procs();
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          p = _ref[i];
          if (p === proc) {
            break;
          }
        }
        if (i > -1) {
          this.procs().splice(i, 1);
        }
      }
      return val;
    };

    return Var_List;

  })();

  module.exports = Var_List;

}).call(this);
