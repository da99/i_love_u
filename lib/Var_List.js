// Generated by CoffeeScript 1.3.3
(function() {
  var Var, Var_List, rw, _;

  rw = require("rw_ize");

  _ = require("underscore");

  Var = require("i_love_u/lib/Var");

  Var_List = (function() {

    Var_List.counter = 0;

    rw.ize(Var_List);

    Var_List.read_able("object_id", "name", "vars", "parent_list", 'calling_list');

    Var_List.read_able_bool("is_a_var_list");

    Var_List.private_ize("scope");

    function Var_List(new_name, parent_list, calling_list) {
      this.rw('object_id', ++Var_List.counter);
      this.rw('name', new_name);
      this.rw('vars', {});
      this.rw('parent_list', parent_list || null);
      this.rw('calling_list', calling_list || null);
      this.rw('is_a_var_list', true);
      this.scope_is('local');
    }

    Var_List.prototype.is_named = function(n) {
      return !!this.get(b);
    };

    Var_List.prototype.get_or_throw = function(name) {
      return this.get(name) || (function() {
        throw new Error("Variable not found: " + name);
      })();
    };

    Var_List.prototype.get = function(name) {
      var target;
      if (this.to_local()) {
        return _.find(this.vars, function(v) {
          return v.is_named(name);
        });
      } else {
        target = this.scope().get(name);
        if (target && target.is_import_able()) {
          return target;
        }
      }
    };

    Var_List.prototype.push_name_and_value = function(name, val) {
      if (arguments.length !== 2) {
        throw new Error("Arguments length can only be 2: " + arguments);
      }
      return this.push(new Var(name, val));
    };

    Var_List.prototype.push = function(v) {
      if (!this.to_local()) {
        return this.scope().push(v);
      }
      v.belongs_to(this.object_id());
      if (this.vars()[v.name()]) {
        throw new Error("Name for var already defined: " + (v.name()));
      }
      return this.vars()[v.name()] = v;
    };

    Var_List.prototype.pop = function(n) {
      var val;
      if (!this.to_local()) {
        return this.scope.pop(n);
      }
      if (!this.is_named(n)) {
        throw new Error("Not found: " + n);
      }
      val = this.vars()[n];
      delete this.vars()[n];
      return val;
    };

    Var_List.prototype.scope_is = function(target) {
      switch (target) {
        case "local":
        case "outside":
        case "calling":
          return this.scope(target);
        case null:
        case void 0:
          return this.read('scope');
        default:
          throw new Error("Unknown scope: " + target);
      }
    };

    Var_List.prototype.scope = function() {
      if (this.to_local()) {
        return null;
      } else if (this.to_outside()) {
        return this.outside_list();
      } else if (this.to_calling()) {
        return this.calling_list();
      } else {
        throw new Error("Unknown scope: " + (this.read('scope')));
      }
    };

    Var_List.prototype.to_local = function() {
      return this.read('scope') === "local";
    };

    Var_List.prototype.to_outside = function() {
      return this.read('scope') === "outside";
    };

    Var_List.prototype.to_calling = function() {
      return this.read('scope') === "calling";
    };

    return Var_List;

  })();

  module.exports = Var_List;

}).call(this);
