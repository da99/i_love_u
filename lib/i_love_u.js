// Generated by CoffeeScript 1.3.3
(function() {
  var Procedure, add_num, englishy, i_love_u, parser, rw, word_is_word,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  parser = require('englishy');

  englishy = require('englishy');

  if (!Array.prototype.inject) {
    Array.prototype.inject = function(start, func) {
      var i, memo, _i, _len;
      memo = start;
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        i = this[_i];
        memo = func(memo, i);
      }
      return memo;
    };
  }

  if (!RegExp.escape) {
    RegExp.escape = function(s) {
      return s.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
    };
  }

  if (!RegExp.captures) {
    RegExp.captures = function(r, str) {
      var match, vals;
      r.lastIndex = 0;
      match = null;
      vals = null;
      while ((match = r.exec(str))) {
        if (vals == null) {
          vals = [];
        }
        vals.push(match);
      }
      return vals;
    };
  }

  if (!RegExp.first_capture) {
    RegExp.first_capture = function(r, str) {
      var match, vals;
      r.lastIndex = 0;
      match = null;
      vals = null;
      return r.exec(str);
    };
  }

  rw = {};

  rw.ize = function(klass) {
    var m, me, _i, _j, _len, _len1, _ref, _ref1, _results;
    me = arguments.callee;
    if (!me.read_able) {
      me.on_prototype = "write".split(/\s+/);
      me.on_class = "read_able write_able read_write_able".split(/\s+/);
      me.funcs = {
        read_write_able: function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          this.read_able.apply(this, args);
          return this.write_able.apply(this, args);
        },
        read_able: function() {
          var args, prop, _i, _len, _results;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          _results = [];
          for (_i = 0, _len = args.length; _i < _len; _i++) {
            prop = args[_i];
            this.prototype[prop] = function() {
              return this.d[arguments.callee.prop_name];
            };
            _results.push(this.prototype[prop].prop_name = prop);
          }
          return _results;
        },
        write_able: function() {
          var args, prop, _base, _i, _len, _ref, _results;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          _results = [];
          for (_i = 0, _len = args.length; _i < _len; _i++) {
            prop = args[_i];
            if ((_ref = (_base = this.prototype).write_ables) == null) {
              _base.write_ables = [];
            }
            _results.push(this.prototype.write_ables.push(prop));
          }
          return _results;
        },
        write: function(prop, val) {
          if (!(__indexOf.call(this['write_ables'], prop) >= 0)) {
            throw new Error("" + prop + " is not write_able.");
          }
          return this.d[prop] = val;
        }
      };
    }
    _ref = me.on_prototype;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      klass.prototype[m] = me.funcs[m];
    }
    _ref1 = me.on_class;
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      m = _ref1[_j];
      _results.push(klass[m] = me.funcs[m]);
    }
    return _results;
  };

  exports.i_love_u = i_love_u = (function() {

    i_love_u.No_Match = "no_match";

    i_love_u.Base_Procs = [];

    rw.ize(i_love_u);

    i_love_u.read_write_able('address', 'pattern', 'list', 'procs', 'data');

    i_love_u.read_able('code', 'original_code');

    function i_love_u(str) {
      this.d = {};
      this.d.original_code = str;
      this.d.original_code = str;
      this.d.code = str.englishy('standardize');
      this.d.procs = [].concat(this.constructor.Base_Procs);
      this.d.list = [];
    }

    i_love_u.prototype.add_to_data = function(k, v) {
      var obj;
      obj = {
        name: k,
        value: v,
        inherits_from: []
      };
      return this.list().push(obj);
    };

    i_love_u.prototype.add_to_list = function(val) {
      return this.list().push(val);
    };

    i_love_u.prototype.data = function(k) {
      var v, val, vals, _i, _len, _ref;
      if (k) {
        _ref = this.list;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          if (v.name === k) {
            val = v;
          }
        }
        return val.value;
      } else {
        return vals = (function() {
          var _j, _len1, _ref1, _results;
          _ref1 = this.list();
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            v = _ref1[_j];
            if (v.hasOwnProperty("name") && v.hasOwnProperty("value")) {
              _results.push(v);
            }
          }
          return _results;
        }).call(this);
      }
    };

    i_love_u.prototype.run = function() {
      var code_block, compiled, current, i, line, lines, match, me, pair, r_txt, regexp, stop, v, _i, _j, _len, _len1, _ref;
      lines = (new englishy.Englishy(this.code())).to_array();
      me = this;
      for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
        pair = lines[i];
        line = pair[0];
        code_block = pair[1];
        if (line && !code_block) {
          line = line.englishy('remove_end', 'period');
        } else if (line && code_block) {
          line = line.englishy('remove_end', 'colon');
        }
        match = false;
        stop = false;
        current = line;
        compiled = line;
        while (!stop) {
          compiled = current;
          _ref = this.data();
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            v = _ref[_j];
            r_txt = "(?:^|\\s+)" + RegExp.escape(v.name) + "(?:\\s+|$)";
            regexp = new RegExp(r_txt, "g");
            current = current.replace(regexp, " " + v.value + " ").englishy('strip');
          }
          current = this.procs().inject(current, function(memo, o) {
            return o.run(me, memo, code_block);
          });
          stop = compiled === current;
        }
      }
      return this.list();
    };

    return i_love_u;

  })();

  exports.Procedure = Procedure = (function() {

    rw.ize(Procedure);

    Procedure.read_write_able('pattern', 'regexp', 'data', 'list', 'procedure');

    Procedure.prototype.word_reg = /\\\[\s*WORD\s*\\\]/g;

    Procedure.prototype.num_reg = /\\\[\s*NUM\s*\\\]/g;

    Procedure.prototype.escaped_end_period = /\\\.$/;

    function Procedure(pattern) {
      var str;
      this.d = {};
      this.d.data = {};
      this.d.pattern = pattern;
      this.d.list = [];
      str = RegExp.escape(pattern.englishy('strip'));
      str = str.replace(this.word_reg, "([a-zA-Z0-9\.\_\-]+)");
      str = str.replace(this.num_reg, "([\+\-]?[\-0-9\.]+)");
      if (this.escaped_end_period.test(str)) {
        str = "^" + str.replace(this.escaped_end_period, "") + "$";
      }
      this.d.regexp = new RegExp(str, "g");
    }

    Procedure.prototype.run = function(env, line, code) {
      var captures, l, r;
      captures = RegExp.first_capture(this.regexp(), line);
      if (!captures) {
        return line;
      }
      this.d.data["Args"] = captures;
      this.d.data["Block"] = code;
      this.d.data["Outer-Block"] = env;
      r = this.procedure()(this);
      l = line.replace(captures[0], r.toString());
      return l;
    };

    return Procedure;

  })();

  add_num = new Procedure("[NUM] + [NUM]");

  add_num.write('procedure', function(env) {
    var m, n, val;
    m = env.data()['Args'][1];
    n = env.data()['Args'][2];
    val = parseFloat(m) + parseFloat(n);
    return val;
  });

  word_is_word = new Procedure("[WORD] is: [WORD].");

  word_is_word.write('procedure', function(env) {
    var name, pair, val;
    pair = env.data()['Args'];
    name = pair[1];
    val = pair[2];
    env.data()['Outer-Block'].add_to_data(name, val);
    return val;
  });

  i_love_u.Base_Procs.push(add_num);

  i_love_u.Base_Procs.push(word_is_word);

}).call(this);
