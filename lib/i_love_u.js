// Generated by CoffeeScript 1.3.3
(function() {
  var Arguments_Match, Base_Procs, LOOP_LIMIT, Line, Procedure, Var, Var_List, XRegExp, arr_surgeon, cloneextend, englishy, funcy_perm, humane_list, i_love_u, list_noun, rw, string_da99, _,
    __slice = [].slice;

  englishy = require('englishy');

  string_da99 = require('string_da99');

  funcy_perm = require('funcy_perm');

  arr_surgeon = require('array_surgeon');

  _ = require('underscore');

  cloneextend = require("cloneextend");

  rw = require('rw_ize');

  humane_list = require('humane_list');

  XRegExp = require('xregexp').XRegExp;

  Line = require('i_love_u/lib/Line');

  Procedure = require("i_love_u/lib/Procedure");

  Base_Procs = require("i_love_u/lib/Base_Procs");

  Arguments_Match = require("i_love_u/lib/Arguments_Match");

  Var_List = require("i_love_u/lib/Var_List");

  LOOP_LIMIT = 10123;

  if (!RegExp.captures) {
    RegExp.captures = function(r, str) {
      var match, pos, v, vals, _i, _len;
      r.lastIndex = 0;
      match = null;
      vals = [];
      pos = 0;
      while ((match = XRegExp.exec(str, r, pos, 'sticky'))) {
        pos = match.index + match[0].length;
        match.shift();
        for (_i = 0, _len = match.length; _i < _len; _i++) {
          v = match[_i];
          vals.push(v);
        }
      }
      if (vals.length === 0) {
        return null;
      }
      return vals;
    };
  }

  if (!RegExp.first_capture) {
    RegExp.first_capture = function(r, str) {
      var match, vals;
      r.lastIndex = 0;
      match = null;
      vals = null;
      return r.exec(str);
    };
  }

  exports.Var = Var = (function() {

    rw.ize(Var);

    Var.read_able("name", "inherits_from");

    Var.read_write_able("value");

    Var.read_able_bool("is_a_var");

    function Var(n, val) {
      this.rw('name', n);
      this.rw("value", val);
      this.rw("inherits_from", []);
      this.rw("is_a_var", true);
    }

    return Var;

  })();

  exports.i_love_u = i_love_u = (function() {

    i_love_u.No_Match = "no_match";

    i_love_u.Base_Procs = [];

    i_love_u.Base_Data = [];

    rw.ize(i_love_u);

    i_love_u.read_write_able('address', 'pattern', 'data', 'procs', 'data', 'scope', 'loop_total');

    i_love_u.read_able('code', 'original_code', 'eval_ed');

    i_love_u.add_base_data = function(name, val) {
      return this.Base_Data.push([name, val]);
    };

    i_love_u.add_base_proc = function(proc) {
      switch (proc.position()) {
        case 'top':
          return this.Base_Procs.unshift(proc);
        case 'middle':
          return this.Base_Procs.splice(Math.ceil(this.Base_Procs.length / 2), 0, proc);
        case 'bottom':
          return this.Base_Procs.push(proc);
        default:
          throw new Error("Unknown position for \"" + (proc.pattern()) + "\": " + (proc.position()));
      }
    };

    function i_love_u(str, env) {
      var pair, _i, _len, _ref;
      if (!_.isString(str)) {
        str = str.text();
      }
      this.rw("original_code", str);
      this.rw("code", str.standardize());
      this.rw("eval_ed", []);
      this.scope([]);
      this.procs([].concat(this.constructor.Base_Procs));
      if (env) {
        this.rw("loop_total", env.loop_total());
        this._data_ = env.data();
      } else {
        this.rw("loop_total", 0);
        this._data_ = [];
        _ref = this.constructor.Base_Data;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          pair = _ref[_i];
          this.add_data.apply(this, pair);
        }
      }
    }

    i_love_u.is_name_of_dynamic_data = function(name) {
      return !!this.dynamic_data(name);
    };

    i_love_u.dynamic_data = function() {
      var args, func, kv, name, _i, _len, _ref, _ref1;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if ((_ref = this._dynamic_data_) == null) {
        this._dynamic_data_ = [];
      }
      if (args.length === 0) {
        return this._dynamic_data_;
      } else if (args.length === 1) {
        name = args[0];
        _ref1 = this._dynamic_data_;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          kv = _ref1[_i];
          if (name === kv[0] || kv[0].test(name)) {
            func = kv[1];
          }
        }
        return func;
      } else if (args.length === 2) {
        return this._dynamic_data_.push([args[0], args[1]]);
      } else {
        throw new Error("Unknown args: " + args);
      }
    };

    i_love_u.dynamic_data(/^Block_Text_Line_[0-9]+$/, function(name, env, line) {
      var block, num, val;
      block = line.block();
      if (!block) {
        throw new Error("Block is not defined.");
      }
      num = parseInt(name.split('_').pop());
      return val = block.text_line(num);
    });

    i_love_u.dynamic_data(/^Block_List_[0-9]+$/, function(name, env, line) {
      var block, list, num, str, tokens, v, _i, _len;
      block = line.block();
      if (!block) {
        throw new Error("Block is not defined.");
      }
      num = parseInt(name.split('_').pop());
      str = block.text_line(num).strip();
      tokens = _.flatten(new englishy.Englishy(str + '.').to_tokens());
      list = [];
      for (_i = 0, _len = tokens.length; _i < _len; _i++) {
        v = tokens[_i];
        if (v.is_quoted()) {
          list.push(v.value());
        } else {
          list.push(env.get_if_data(v.value(), line));
        }
      }
      return list;
    });

    i_love_u.prototype.dynamic_data = function(name, line) {
      var func;
      func = this.constructor.dynamic_data(name);
      return func(name, this, line);
    };

    i_love_u.prototype.is_name_of_dynamic_data = function(k) {
      return this.constructor.is_name_of_dynamic_data(k);
    };

    i_love_u.prototype.is_name_of_data = function(k) {
      var v, val, _i, _len, _ref;
      if (this.is_name_of_dynamic_data(k)) {
        return true;
      }
      _ref = this._data_;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        if (v.name() === k) {
          val = v;
        }
      }
      return !!val;
    };

    i_love_u.prototype.add_data = function(k, v) {
      return this._data_.push(new Var(k, v));
    };

    i_love_u.prototype.update_data = function(k, new_v) {
      var i, v, val_i, _i, _len, _ref;
      _ref = this._data_;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        v = _ref[i];
        if (v.name() === k) {
          val_i = i;
        }
      }
      if (isNaN(parseInt(val_i))) {
        throw new Error("No data named: " + k);
      }
      if (new_v.is_a_var) {
        return this._data_[val_i] = new_v;
      } else {
        return this._data_[val_i].value(new_v);
      }
    };

    i_love_u.prototype.delete_data = function(name) {
      var k, pos, v, _i, _len, _ref;
      if (!this.is_name_of_data(name)) {
        throw new Error("Data does not exist: " + name + ".");
      }
      _ref = this._data_;
      for (k = _i = 0, _len = _ref.length; _i < _len; k = ++_i) {
        v = _ref[k];
        if (v.name() === name) {
          pos = k;
        }
      }
      return this._data_.splice(pos, 1);
    };

    i_love_u.prototype.data = function(k, line) {
      var v, val, vals, _i, _len, _ref;
      if (this.is_name_of_dynamic_data(k)) {
        return this.dynamic_data(k, line);
      } else if (k) {
        _ref = this._data_;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          if (v.name() === k) {
            val = v;
          }
        }
        return val && val.value();
      } else {
        vals = (function() {
          var _j, _len1, _ref1, _results;
          _ref1 = this._data_;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            v = _ref1[_j];
            if (("name" in v) && ("value" in v)) {
              _results.push(v);
            }
          }
          return _results;
        }).call(this);
        vals;

        return this._data_;
      }
    };

    i_love_u.prototype.get_if_data = function(name, line) {
      if (!line) {
        throw new Error("Line is required.");
      }
      if (this.is_name_of_data(name, line)) {
        return this.data(name, line);
      } else {
        return name;
      }
    };

    i_love_u.prototype.record_loop = function(text) {
      this.loop_total(this.loop_total() + 1);
      if (this.loop_total() > LOOP_LIMIT) {
        throw new Error("Loop limit exceeded " + LOOP_LIMIT + " using: " + text + ".");
      }
      return this.loop_total();
    };

    i_love_u.prototype.run_tokens = function() {
      var args, is_any_match, is_full_match, line, match, me, partial_match, proc, results, _i, _len, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      line = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args), t = typeof result;
        return t == "object" || t == "function" ? result || child : child;
      })(Line, args, function(){});
      is_full_match = false;
      partial_match = false;
      me = this;
      while (true) {
        is_any_match = false;
        _ref = this.procs();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          proc = _ref[_i];
          while (true) {
            match = new Arguments_Match(this, line, proc);
            if (!match.is_a_match()) {
              break;
            }
            partial_match = is_any_match = true;
            if (match.is_full_match()) {
              is_full_match = true;
              break;
            }
          }
          if (is_full_match) {
            break;
          }
        }
        if (is_full_match) {
          break;
        }
        if (!is_any_match) {
          break;
        }
      }
      return results = {
        is_match: partial_match,
        is_full_match: is_full_match,
        compiled: line.pair()
      };
    };

    i_love_u.prototype.run = function() {
      var end, i, line, line_and_block, lines, results, _i, _len;
      lines = (new englishy.Englishy(this.code())).to_tokens();
      for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
        line_and_block = lines[i];
        results = this.run_tokens(line_and_block[0], line_and_block[1]);
        if (!results.is_any_match || !results.is_full_match) {
          end = line_and_block[1] ? ":" : ".";
          line = "" + (englishy.Stringy.to_strings(line_and_block[0]).join(" ")) + end;
          if (!results.is_match) {
            throw new Error("No match for: " + line);
          }
          if (!results.is_full_match) {
            throw new Error("No full match: " + line + " => " + (results.compiled[0].join(" ")) + end);
          }
        }
        this.eval_ed().push(results.compiled);
      }
      return true;
    };

    return i_love_u;

  })();

  Base_Procs.i_love_u(exports.i_love_u);

  list_noun = {
    is_a_noun: function() {
      return true;
    },
    target: function() {
      var _ref;
      return (_ref = this._target_) != null ? _ref : this._target_ = new humane_list();
    },
    insert: function(pos, val) {
      return this.target().push(pos, val);
    },
    values: function() {
      return this.target().values();
    }
  };

  i_love_u.add_base_data("List", list_noun);

}).call(this);
