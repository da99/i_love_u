// Generated by CoffeeScript 1.3.3
(function() {
  var Arguments_Match, Base_Data, Base_Procs, Env_List, LOOP_LIMIT, Line, Procedure, Var, Var_List, XRegExp, arr_surgeon, cloneextend, englishy, funcy_perm, humane_list, i_love_u, rw, string_da99, _;

  englishy = require('englishy');

  string_da99 = require('string_da99');

  funcy_perm = require('funcy_perm');

  arr_surgeon = require('array_surgeon');

  _ = require('underscore');

  cloneextend = require("cloneextend");

  rw = require('rw_ize');

  humane_list = require('humane_list');

  XRegExp = require('xregexp').XRegExp;

  Line = require('i_love_u/lib/Line');

  Procedure = require("i_love_u/lib/Procedure");

  Base_Procs = require("i_love_u/lib/Base_Procs");

  Base_Data = require("i_love_u/lib/Base_Data");

  Arguments_Match = require("i_love_u/lib/Arguments_Match");

  Var = require("i_love_u/lib/Var");

  Var_List = require("i_love_u/lib/Var_List");

  Env_List = require("i_love_u/lib/Env_List");

  LOOP_LIMIT = 10123;

  if (!RegExp.captures) {
    RegExp.captures = function(r, str) {
      var match, pos, v, vals, _i, _len;
      r.lastIndex = 0;
      match = null;
      vals = [];
      pos = 0;
      while ((match = XRegExp.exec(str, r, pos, 'sticky'))) {
        pos = match.index + match[0].length;
        match.shift();
        for (_i = 0, _len = match.length; _i < _len; _i++) {
          v = match[_i];
          vals.push(v);
        }
      }
      if (vals.length === 0) {
        return null;
      }
      return vals;
    };
  }

  if (!RegExp.first_capture) {
    RegExp.first_capture = function(r, str) {
      var match, vals;
      r.lastIndex = 0;
      match = null;
      vals = null;
      return r.exec(str);
    };
  }

  exports.i_love_u = i_love_u = (function() {
    var arr, meth, meths, prop, _i, _len;

    i_love_u.No_Match = "no_match";

    i_love_u.inits = function() {
      var v, _i, _len, _ref;
      if ((_ref = this._inits_) == null) {
        this._inits_ = [];
      }
      if (arguments.length !== 0) {
        for (_i = 0, _len = arguments.length; _i < _len; _i++) {
          v = arguments[_i];
          this._inits_.push(v);
        }
        this._inits_ = _.unique(this._inits_);
      }
      return this._inits_;
    };

    rw.ize(i_love_u);

    i_love_u.read_able('vars', 'envs', 'loop_total');

    i_love_u.read_write_able("address");

    i_love_u.read_able('code', 'original_code', 'eval_ed');

    function i_love_u(str, outside_env) {
      var init, _i, _len, _ref;
      if (!_.isString(str)) {
        str = str.text();
      }
      this.rw("original_code", str);
      this.rw("code", str.standardize());
      this.rw("eval_ed", []);
      this.rw('envs', new Env_List(this, outside_env));
      this.rw("loop_total", 0);
      this.rw("vars", new Var_List(this));
      if (!this.envs().has_outside()) {
        _ref = this.constructor.inits();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          init = _ref[_i];
          init(this);
        }
      }
    }

    meths = {
      'vars': ['get', 'get_if_data', 'run_line_tokens', 'push', 'push_name_and_value', 'update_name_and_value'],
      'envs': ['is_read_local', 'is_write_local', 'has_outside', 'read', 'write']
    };

    for (prop in meths) {
      arr = meths[prop];
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        meth = arr[_i];
        i_love_u.prototype[meth] = new Function("return this." + prop + "()." + meth + ".apply( this." + prop + "(), Array.prototype.slice.apply(arguments) );");
      }
    }

    i_love_u.prototype.record_loop = function(text) {
      this.loop_total(this.loop_total() + 1);
      if (this.loop_total() > LOOP_LIMIT) {
        throw new Error("Loop limit exceeded " + LOOP_LIMIT + " using: " + text + ".");
      }
      return this.loop_total();
    };

    i_love_u.prototype.run = function() {
      var end, i, line, line_and_block, lines, match, _j, _len1;
      lines = (new englishy.Englishy(this.code())).to_tokens();
      for (i = _j = 0, _len1 = lines.length; _j < _len1; i = ++_j) {
        line_and_block = lines[i];
        match = this.run_line_tokens(line_and_block);
        if ((!(typeof match.is_a_match === "function" ? match.is_a_match() : void 0)) || !(typeof match.is_full_match === "function" ? match.is_full_match() : void 0)) {
          end = line_and_block[1] ? ":" : ".";
          line = "" + (englishy.Stringy.to_strings(line_and_block[0]).join(" ")) + end;
          if (!(typeof match.is_a_match === "function" ? match.is_a_match() : void 0)) {
            throw new Error("No match for: " + line);
          }
          if (match && !match.is_full_match()) {
            throw new Error("No full match: " + line + " => " + (match.line().line().join(" ")) + end);
          }
        }
        if (match) {
          this.eval_ed().push(match.line().line());
        }
      }
      return true;
    };

    return i_love_u;

  })();

  i_love_u.inits(Base_Procs.i_love_u, Base_Data.i_love_u);

}).call(this);
