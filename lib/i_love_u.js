// Generated by CoffeeScript 1.3.3
(function() {
  var Procedure, arr_surgeon, as_num, englishy, funcy_perm, i_love_u, md_num, rw, string_da99, word_is_word, _;

  englishy = require('englishy');

  string_da99 = require('string_da99');

  funcy_perm = require('funcy_perm');

  arr_surgeon = require('array_surgeon');

  _ = require('underscore');

  rw = require('rw_ize');

  Procedure = require("i_love_u/lib/Procedure");

  if (!RegExp.escape) {
    RegExp.escape = function(s) {
      return s.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
    };
  }

  if (!RegExp.captures) {
    RegExp.captures = function(r, str) {
      var match, runs, vals;
      r.lastIndex = 0;
      match = null;
      vals = null;
      runs = 0;
      while ((match = r.exec(str))) {
        if (runs > 10 && r.lastIndex === 0) {
          throw new Error("/g flag is not set: " + r);
        }
        if (vals == null) {
          vals = [];
        }
        vals.push(match);
        runs += 1;
      }
      return vals;
    };
  }

  if (!RegExp.first_capture) {
    RegExp.first_capture = function(r, str) {
      var match, vals;
      r.lastIndex = 0;
      match = null;
      vals = null;
      return r.exec(str);
    };
  }

  exports.i_love_u = i_love_u = (function() {

    i_love_u.No_Match = "no_match";

    i_love_u.Base_Procs = [];

    rw.ize(i_love_u);

    i_love_u.read_write_able('address', 'pattern', 'list', 'procs', 'data');

    i_love_u.read_able('code', 'original_code');

    i_love_u.add_base_proc = function(proc) {
      this.Base_Procs.push(proc);
      return this.Base_Procs = this.Base_Procs.sort(function(a, b) {
        var a_level, b_level, levels;
        levels = {
          low: 10,
          medium: 0,
          high: -10
        };
        a_level = levels[a.priority()];
        b_level = levels[b.priority()];
        return a_level > b_level;
      });
    };

    function i_love_u(str) {
      this.rw_data().original_code = str;
      this.rw_data().code = str.standardize();
      this.write('procs', [].concat(this.constructor.Base_Procs));
      this.write('list', []);
    }

    i_love_u.prototype.add_to_data = function(k, v) {
      var obj;
      obj = {
        name: k,
        value: v,
        inherits_from: []
      };
      return this.list().push(obj);
    };

    i_love_u.prototype.add_to_list = function(val) {
      return this.list().push(val);
    };

    i_love_u.prototype.is_name_of_data = function(k) {
      var v, val, _i, _len, _ref;
      _ref = this.list();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        if (v.name === k) {
          val = v;
        }
      }
      if (val) {
        return true;
      }
      return false;
    };

    i_love_u.prototype.data = function(k) {
      var v, val, vals, _i, _len, _ref;
      if (k) {
        _ref = this.list;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          if (v.name === k) {
            val = v;
          }
        }
        return val.value;
      } else {
        return vals = (function() {
          var _j, _len1, _ref1, _results;
          _ref1 = this.list();
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            v = _ref1[_j];
            if (v.hasOwnProperty("name") && v.hasOwnProperty("value")) {
              _results.push(v);
            }
          }
          return _results;
        }).call(this);
      }
    };

    i_love_u.prototype.run = function() {
      var code_block, compiled, current, i, line, line_and_block, lines, match, me, sentence_match, sentence_matched, _i, _len, _ref;
      lines = (new englishy.Englishy(this.code())).to_array();
      me = this;
      if ((_ref = this.compile_sentence_func) == null) {
        this.compile_sentence_func = function(memo, proc) {
          return proc.run(me, memo);
        };
      }
      for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
        line_and_block = lines[i];
        line = line_and_block[0];
        code_block = line_and_block[1];
        if (line && !code_block) {
          line = line.remove_end('.');
        } else if (line && code_block) {
          line = line.remove_end(':');
        }
        line = line.whitespace_split();
        match = false;
        current = [line, code_block];
        compiled = null;
        sentence_match = true;
        while (sentence_matched) {
          compiled = _.reduce(this.procs(), this.compile_sentence_func, current);
          sentence_matched = !(_.isEqual(compiled, current));
          current = compiled;
        }
      }
      return this.list();
    };

    return i_love_u;

  })();

  md_num = new Procedure("!>NUM< !>CHAR< !>NUM<");

  md_num.write('priority', 'high');

  md_num.write('procedure', function(env) {
    var m, n, op;
    m = env.data()['Args'][1];
    op = env.data()['Args'][2];
    n = env.data()['Args'][3];
    switch (op) {
      case '*':
        return parseFloat(m) * parseFloat(n);
      case '/':
        return parseFloat(m) / parseFloat(n);
      default:
        return {
          ignore_this: true
        };
    }
  });

  as_num = new Procedure("!>NUM< !>CHAR< !>NUM<");

  as_num.write('procedure', function(env) {
    var m, n, op;
    m = env.data()['Args'][1];
    op = env.data()['Args'][2];
    n = env.data()['Args'][3];
    switch (op) {
      case '+':
        return parseFloat(m) + parseFloat(n);
      case '-':
        return parseFloat(m) - parseFloat(n);
      default:
        return {
          ignore_this: true
        };
    }
  });

  word_is_word = new Procedure("!>WORD< is: !>WORD<.");

  word_is_word.write('procedure', function(env) {
    var name, pair, val;
    pair = env.data()['Args'];
    name = pair[1];
    val = pair[2];
    env.data()['Outer-Block'].add_to_data(name, val);
    return val;
  });

  i_love_u.add_base_proc(as_num);

  i_love_u.add_base_proc(md_num);

  i_love_u.add_base_proc(word_is_word);

}).call(this);
