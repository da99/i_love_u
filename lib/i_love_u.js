// Generated by CoffeeScript 1.3.3
(function() {
  var LOOP_LIMIT, Procedure, Var, arr_surgeon, as_num, catch_err, compare, comparison_type_cast, else_false, englishy, equals, funcy_perm, i_love_u, if_false, if_true, md_num, not_equals, run_comparison_on_match, rw, string_da99, word_is_now, word_is_word, _, _while_,
    __slice = [].slice;

  englishy = require('englishy');

  string_da99 = require('string_da99');

  funcy_perm = require('funcy_perm');

  arr_surgeon = require('array_surgeon');

  _ = require('underscore');

  rw = require('rw_ize');

  Procedure = require("i_love_u/lib/Procedure");

  LOOP_LIMIT = 10123;

  if (!String.prototype.remove_quotes) {
    String.prototype.is_ilu = function() {
      return _.first(this) === '"' && _.last(this) === '"';
    };
    String.prototype.remove_quotes = function() {
      if (this.is_ilu()) {
        return this.replace(/^"/, "").replace(/"$/, "");
      }
      return this;
    };
  }

  if (!RegExp.escape) {
    RegExp.escape = function(s) {
      return s.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
    };
  }

  if (!RegExp.captures) {
    RegExp.captures = function(r, str) {
      var match, runs, vals;
      r.lastIndex = 0;
      match = null;
      vals = null;
      runs = 0;
      while ((match = r.exec(str))) {
        if (runs > 10 && r.lastIndex === 0) {
          throw new Error("/g flag is not set: " + r);
        }
        if (vals == null) {
          vals = [];
        }
        vals.push(match);
        runs += 1;
      }
      return vals;
    };
  }

  if (!RegExp.first_capture) {
    RegExp.first_capture = function(r, str) {
      var match, vals;
      r.lastIndex = 0;
      match = null;
      vals = null;
      return r.exec(str);
    };
  }

  comparison_type_cast = function(v) {
    return v = (function() {
      if (_.isString(v)) {
        if (v === "true") {
          return true;
        } else if (v === "false") {
          return false;
        } else if (!_.isNaN(v)) {
          return parseFloat(v);
        } else {
          return v;
        }
      } else if (_.isNumber(v)) {
        return v;
      } else if (_.isBoolean(v)) {
        return v;
      } else {
        throw new Error("Can't convert value into type for comparison: " + v);
      }
    })();
  };

  compare = function(op, raw_r, raw_l) {
    var ans, l, r;
    r = comparison_type_cast(raw_r);
    l = comparison_type_cast(raw_l);
    ans = (function() {
      switch (op) {
        case ">":
          return r > l;
        case "<":
          return r < l;
        case ">=":
          return r >= l;
        case "<=":
          return r <= l;
        case "=":
          return r === l;
        case "!=":
          return r !== l;
        default:
          throw new Error("Unknown comparison operation: " + op + " for " + r + ", " + l);
      }
    })();
    return ans;
  };

  exports.Var = Var = (function() {

    rw.ize(Var);

    Var.read_able("name", "inherits_from");

    Var.read_write_able("value");

    Var.read_able_bool("is_a_var");

    function Var(n, val) {
      this.rw_data().name = n;
      this.rw_data().value = val;
      this.rw_data().inherits_from = [];
      this.rw_data().is_a_var = true;
    }

    return Var;

  })();

  exports.i_love_u = i_love_u = (function() {

    i_love_u.No_Match = "no_match";

    i_love_u.Base_Procs = [];

    rw.ize(i_love_u);

    i_love_u.read_write_able('address', 'pattern', 'data', 'procs', 'data', 'scope', 'loop_total');

    i_love_u.read_able('code', 'original_code', 'eval_ed');

    i_love_u.add_base_proc = function(proc) {
      this.Base_Procs.push(proc);
      return this.Base_Procs = this.Base_Procs.sort(function(a, b) {
        var a_level, b_level, levels;
        levels = {
          before_variables: 30,
          last: 20,
          low: 10,
          medium: 0,
          high: -10
        };
        a_level = levels[a.priority()];
        b_level = levels[b.priority()];
        return a_level - b_level;
      });
    };

    function i_love_u(str, env) {
      this.rw_data().original_code = str;
      this.rw_data().code = str.standardize();
      this.rw_data().eval_ed = [];
      this.write('scope', []);
      this.write('procs', [].concat(this.constructor.Base_Procs));
      if (env) {
        this.rw_data().loop_total = env.loop_total();
        this._data_ = env.data();
      } else {
        this.rw_data().loop_total = 0;
        this._data_ = [];
      }
    }

    i_love_u.is_name_of_dynamic_data = function(name) {
      return !!this.dynamic_data(name);
    };

    i_love_u.dynamic_data = function() {
      var args, func, kv, name, _i, _len, _ref, _ref1;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if ((_ref = this._dynamic_data_) == null) {
        this._dynamic_data_ = [];
      }
      if (args.length === 0) {
        return this._dynamic_data_;
      } else if (args.length === 1) {
        name = args[0];
        _ref1 = this._dynamic_data_;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          kv = _ref1[_i];
          if (name === kv[0] || kv[0].test(name)) {
            func = kv[1];
          }
        }
        return func;
      } else if (args.length === 2) {
        return this._dynamic_data_.push([args[0], args[1]]);
      } else {
        throw new Error("Unknown args: " + args);
      }
    };

    i_love_u.dynamic_data(/^Block_Text_Line_[0-9]+$/, function(env, line, block, name) {
      var num, val;
      if (!block) {
        throw new Error("Block is not defined.");
      }
      num = parseInt(name.split('_').pop());
      val = block.text_line(num);
      return val;
    });

    i_love_u.dynamic_data(/^Block_List_[0-9]+$/, function(env, line, block, name) {
      var list, num, str, tokens, v;
      if (!block) {
        throw new Error("Block is not defined.");
      }
      num = parseInt(name.split('_').pop());
      str = block.text_line(num).strip();
      tokens = _.flatten(new englishy.Englishy(str + '.').to_tokens());
      list = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = tokens.length; _i < _len; _i++) {
          v = tokens[_i];
          _results.push(env.get_if_data(v));
        }
        return _results;
      })();
      return list;
    });

    i_love_u.prototype.dynamic_data = function(name, line, block) {
      var func;
      func = this.constructor.dynamic_data(name);
      return func(this, line, block, name);
    };

    i_love_u.prototype.is_name_of_dynamic_data = function(k) {
      return this.constructor.is_name_of_dynamic_data(k);
    };

    i_love_u.prototype.is_name_of_data = function(k) {
      var v, val, _i, _len, _ref;
      if (this.is_name_of_dynamic_data(k)) {
        return true;
      }
      _ref = this._data_;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        if (v.name() === k) {
          val = v;
        }
      }
      return !!val;
    };

    i_love_u.prototype.add_data = function(k, v) {
      return this._data_.push(new Var(k, v));
    };

    i_love_u.prototype.update_data = function(k, new_v) {
      var i, v, val_i, _i, _len, _ref;
      _ref = this._data_;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        v = _ref[i];
        if (v.name() === k) {
          val_i = i;
        }
      }
      if (isNaN(parseInt(val_i))) {
        throw new Error("No data named: " + k);
      }
      if (new_v.is_a_var) {
        return this._data_[val_i] = new_v;
      } else {
        return this._data_[val_i].write("value", new_v);
      }
    };

    i_love_u.prototype.data = function(k, line, block) {
      var v, val, vals, _i, _len, _ref;
      if (this.is_name_of_dynamic_data(k)) {
        return this.dynamic_data(k, line, block);
      } else if (k) {
        _ref = this._data_;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          if (v.name() === k) {
            val = v;
          }
        }
        return val && val.value();
      } else {
        vals = (function() {
          var _j, _len1, _ref1, _results;
          _ref1 = this._data_;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            v = _ref1[_j];
            if (("name" in v) && ("value" in v)) {
              _results.push(v);
            }
          }
          return _results;
        }).call(this);
        vals;

        return this._data_;
      }
    };

    i_love_u.prototype.get_if_data = function(name) {
      if (this.is_name_of_data(name)) {
        return this.data(name);
      } else {
        return name;
      }
    };

    i_love_u.prototype.run_tokens = function(line, code_block) {
      var current, is_any_match, is_full_match, match, me, orig_pair, partial_match, proc, results, _i, _len, _ref;
      orig_pair = [line, code_block];
      current = orig_pair;
      is_full_match = false;
      partial_match = false;
      me = this;
      while (true) {
        is_any_match = false;
        _ref = this.procs();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          proc = _ref[_i];
          while (true) {
            match = proc.run(me, current);
            if (!match) {
              break;
            }
            partial_match = is_any_match = true;
            current = [match.line(), match.code()];
            if (match.is_full_match()) {
              is_full_match = true;
              break;
            }
          }
          if (is_full_match) {
            break;
          }
        }
        if (!is_any_match) {
          break;
        }
      }
      return results = {
        is_match: partial_match,
        is_full_match: is_full_match,
        compiled: current
      };
    };

    i_love_u.prototype.run = function() {
      var end, i, line, line_and_block, lines, results, _i, _len;
      lines = (new englishy.Englishy(this.code())).to_tokens();
      for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
        line_and_block = lines[i];
        results = this.run_tokens(line_and_block[0], line_and_block[1]);
        if (!results.is_any_match || !results.is_full_match) {
          end = line_and_block[1] ? ":" : ".";
          line = "" + (line_and_block[0].join(" ")) + end;
          if (!results.is_match) {
            throw new Error("No match for: " + line);
          }
          if (!results.is_full_match) {
            throw new Error("No full match: " + line + " => " + (results.compiled[0].join(" ")) + end);
          }
        }
        this.eval_ed().push(results.compiled);
      }
      return true;
    };

    return i_love_u;

  })();

  md_num = new Procedure("!>NUM< !>CHAR< !>NUM<");

  md_num.write('priority', 'high');

  md_num.write('procedure', function(match) {
    var m, n, op;
    m = match.args()[0];
    op = match.args()[1];
    n = match.args()[2];
    switch (op) {
      case '*':
        match.replace(parseFloat(m) * parseFloat(n));
        break;
      case '/':
        match.replace(parseFloat(m) / parseFloat(n));
        break;
      default:
        match.is_a_match(false);
    }
    return match;
  });

  as_num = new Procedure("!>NUM< !>CHAR< !>NUM<");

  as_num.write('procedure', function(match) {
    var m, n, op;
    m = match.args()[0];
    op = match.args()[1];
    n = match.args()[2];
    switch (op) {
      case '+':
        match.replace(parseFloat(m) + parseFloat(n));
        break;
      case '-':
        match.replace(parseFloat(m) - parseFloat(n));
        break;
      default:
        match.is_a_match(false);
    }
    return match;
  });

  word_is_word = new Procedure("!>WORD< is: !>ANY<.");

  word_is_word.write('procedure', function(match) {
    var name, val;
    name = _.first(match.args());
    val = _.last(match.args());
    match.env().add_data(name, val);
    match.replace(val);
    return match;
  });

  word_is_now = new Procedure("Update !>WORD< to: !>ANY<.");

  word_is_now.write('procedure', function(match) {
    var name, val;
    name = _.first(match.args());
    val = _.last(match.args());
    match.env().update_data(name.remove_quotes(), val);
    match.replace(val);
    return match;
  });

  if_true = new Procedure("If !>true<:");

  if_true.write('procedure', function(match) {
    var luv;
    luv = new i_love_u(match.code().text(), match.env());
    luv.run();
    match.replace(true);
    match.env().scope().push(true);
    return match;
  });

  if_false = new Procedure("If !>false<:");

  if_false.write('procedure', function(match) {
    match.replace(false);
    match.env().scope().push(false);
    return match;
  });

  else_false = new Procedure("else:");

  else_false.write('procedure', function(match) {
    var luv;
    if (_.last(match.env().scope()) === false) {
      luv = new i_love_u(match.code().text(), match.env());
      luv.run();
      match.replace(false);
    } else {
      match.replace(true);
    }
    return match;
  });

  catch_err = function(msg, func) {
    var err;
    err = null;
    try {
      func();
    } catch (e) {
      err = e;
    }
    if (!err) {
      return true;
    }
    if (err.message.indexOf(msg) > -1) {
      return false;
    } else {
      throw err;
    }
  };

  run_comparison_on_match = function(op, r, l, match) {
    var known_type;
    known_type = catch_err("Can't convert value into type for comparison", function() {
      return match.replace(compare(op, r, l));
    });
    if (known_type) {
      return match;
    } else {
      return match.is_a_match(false);
    }
  };

  not_equals = new Procedure("!>ANY< not equal to !>ANY<");

  not_equals.write('priority', 'last');

  not_equals.write('procedure', function(match) {
    var l, r;
    r = match.args()[0];
    l = match.args()[1];
    return run_comparison_on_match("!=", r, l, match);
  });

  equals = new Procedure("!>ANY< equals !>ANY<");

  equals.write('priority', 'last');

  equals.write('procedure', function(match) {
    var l, r;
    r = match.args()[0];
    l = match.args()[1];
    return run_comparison_on_match("=", r, l, match);
  });

  _while_ = new Procedure("While !>ANY<:");

  _while_.write('procedure', function(match) {
    var code, env, luv, re_run, tokens, val;
    env = match.env();
    val = match.args()[0];
    code = match.code().text();
    tokens = null;
    if (val.is_ilu && val.is_ilu()) {
      val = val.remove_quotes();
      tokens = _.flatten(new englishy.Englishy(val + '.').to_tokens());
    }
    if (!tokens && !(val === true || val === false)) {
      match.is_a_match(false);
      return match;
    }
    re_run = function(val) {
      var ans, bool;
      ans = (function() {
        if (!(val === true || val === false)) {
          bool = env.run_tokens(tokens).compiled[0];
          if (!_.isEqual(bool, [true]) && !_.isEqual(bool, [false])) {
            throw new Error("No match found: " + tokens);
          }
          return bool[0];
        } else {
          return val;
        }
      })();
      return ans;
    };
    while (re_run(val)) {
      env.write('loop_total', env.loop_total() + 1);
      if (env.loop_total() > LOOP_LIMIT) {
        throw new Error("Loop limit exceeded " + LOOP_LIMIT + " using: While " + val + ".");
      }
      luv = new i_love_u(code, env);
      luv.run();
    }
    match.replace(true);
    return match;
  });

  i_love_u.add_base_proc(if_true);

  i_love_u.add_base_proc(if_false);

  i_love_u.add_base_proc(else_false);

  i_love_u.add_base_proc(as_num);

  i_love_u.add_base_proc(md_num);

  i_love_u.add_base_proc(word_is_word);

  i_love_u.add_base_proc(word_is_now);

  i_love_u.add_base_proc(not_equals);

  i_love_u.add_base_proc(equals);

  i_love_u.add_base_proc(_while_);

}).call(this);
