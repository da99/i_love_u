// Generated by CoffeeScript 1.3.3
(function() {
  var LOOP_LIMIT, Line, Procedure, Var, XRegExp, a_new_noun, arr_surgeon, as_num, boolean_type_cast, catch_err, clone_list, cloneextend, compare, comparison_type_cast, derive_list, else_false, englishy, equals, funcy_perm, humane_list, i_love_u, if_true, insert_into_list, is_boolean_string, list_noun, md_num, not_equals, run_comparison_on_match, rw, string_da99, top_bottom, update_word, while_loop, word_is_word, _, _do_,
    __slice = [].slice;

  englishy = require('englishy');

  string_da99 = require('string_da99');

  funcy_perm = require('funcy_perm');

  arr_surgeon = require('array_surgeon');

  _ = require('underscore');

  cloneextend = require("cloneextend");

  rw = require('rw_ize');

  humane_list = require('humane_list');

  XRegExp = require('xregexp').XRegExp;

  Line = require('i_love_u/lib/Line');

  Procedure = require("i_love_u/lib/Procedure");

  LOOP_LIMIT = 10123;

  if (!RegExp.captures) {
    RegExp.captures = function(r, str) {
      var match, pos, v, vals, _i, _len;
      r.lastIndex = 0;
      match = null;
      vals = [];
      pos = 0;
      while ((match = XRegExp.exec(str, r, pos, 'sticky'))) {
        pos = match.index + match[0].length;
        match.shift();
        for (_i = 0, _len = match.length; _i < _len; _i++) {
          v = match[_i];
          vals.push(v);
        }
      }
      if (vals.length === 0) {
        return null;
      }
      return vals;
    };
  }

  if (!RegExp.first_capture) {
    RegExp.first_capture = function(r, str) {
      var match, vals;
      r.lastIndex = 0;
      match = null;
      vals = null;
      return r.exec(str);
    };
  }

  is_boolean_string = function(v) {
    return v === 'true' || v === 'false';
  };

  boolean_type_cast = function(v) {
    if (!is_boolean_string(v)) {
      throw new Error("Can't be converted to boolean: " + v);
    }
    if (v === "true") {
      return true;
    } else {
      return false;
    }
  };

  comparison_type_cast = function(v) {
    return v = (function() {
      if (_.isString(v)) {
        if (v === is_boolean_string(v)) {
          return boolean_type_cast(v);
        } else if (!_.isNaN(v)) {
          return parseFloat(v);
        } else {
          return v;
        }
      } else if (_.isNumber(v)) {
        return v;
      } else if (_.isBoolean(v)) {
        return v;
      } else {
        throw new Error("Can't convert value into type for comparison: " + v);
      }
    })();
  };

  compare = function(op, raw_r, raw_l) {
    var ans, l, r;
    r = comparison_type_cast(raw_r);
    l = comparison_type_cast(raw_l);
    ans = (function() {
      switch (op) {
        case ">":
          return r > l;
        case "<":
          return r < l;
        case ">=":
          return r >= l;
        case "<=":
          return r <= l;
        case "===":
          return r === l;
        case "!==":
          return r !== l;
        default:
          throw new Error("Unknown comparison operation: " + op + " for " + r + ", " + l);
      }
    })();
    return ans;
  };

  exports.Var = Var = (function() {

    rw.ize(Var);

    Var.read_able("name", "inherits_from");

    Var.read_write_able("value");

    Var.read_able_bool("is_a_var");

    function Var(n, val) {
      this.rw_data().name = n;
      this.rw_data().value = val;
      this.rw_data().inherits_from = [];
      this.rw_data().is_a_var = true;
    }

    return Var;

  })();

  exports.i_love_u = i_love_u = (function() {

    i_love_u.No_Match = "no_match";

    i_love_u.Base_Procs = [];

    i_love_u.Base_Data = [];

    rw.ize(i_love_u);

    i_love_u.read_write_able('address', 'pattern', 'data', 'procs', 'data', 'scope', 'loop_total');

    i_love_u.read_able('code', 'original_code', 'eval_ed');

    i_love_u.add_base_data = function(name, val) {
      return this.Base_Data.push([name, val]);
    };

    i_love_u.add_base_proc = function(proc) {
      this.Base_Procs.push(proc);
      return this.Base_Procs = this.Base_Procs.sort(function(a, b) {
        var a_level, b_level, levels;
        levels = {
          last: 20,
          low: 10,
          medium: 0,
          high: -10
        };
        a_level = levels[a.priority()];
        b_level = levels[b.priority()];
        return a_level - b_level;
      });
    };

    function i_love_u(str, env) {
      var pair, _i, _len, _ref;
      if (!_.isString(str)) {
        str = str.text();
      }
      this.rw_data().original_code = str;
      this.rw_data().code = str.standardize();
      this.rw_data().eval_ed = [];
      this.write('scope', []);
      this.write('procs', [].concat(this.constructor.Base_Procs));
      if (env) {
        this.rw_data().loop_total = env.loop_total();
        this._data_ = env.data();
      } else {
        this.rw_data().loop_total = 0;
        this._data_ = [];
        _ref = this.constructor.Base_Data;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          pair = _ref[_i];
          this.add_data.apply(this, pair);
        }
      }
    }

    i_love_u.is_name_of_dynamic_data = function(name) {
      return !!this.dynamic_data(name);
    };

    i_love_u.dynamic_data = function() {
      var args, func, kv, name, _i, _len, _ref, _ref1;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if ((_ref = this._dynamic_data_) == null) {
        this._dynamic_data_ = [];
      }
      if (args.length === 0) {
        return this._dynamic_data_;
      } else if (args.length === 1) {
        name = args[0];
        _ref1 = this._dynamic_data_;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          kv = _ref1[_i];
          if (name === kv[0] || kv[0].test(name)) {
            func = kv[1];
          }
        }
        return func;
      } else if (args.length === 2) {
        return this._dynamic_data_.push([args[0], args[1]]);
      } else {
        throw new Error("Unknown args: " + args);
      }
    };

    i_love_u.dynamic_data(/^Block_Text_Line_[0-9]+$/, function(name, env, line) {
      var block, num, val;
      block = line.block();
      if (!block) {
        throw new Error("Block is not defined.");
      }
      num = parseInt(name.split('_').pop());
      return val = block.text_line(num);
    });

    i_love_u.dynamic_data(/^Block_List_[0-9]+$/, function(name, env, line) {
      var block, list, num, str, tokens, v, _i, _len;
      block = line.block();
      if (!block) {
        throw new Error("Block is not defined.");
      }
      num = parseInt(name.split('_').pop());
      str = block.text_line(num).strip();
      tokens = _.flatten(new englishy.Englishy(str + '.').to_tokens());
      list = [];
      for (_i = 0, _len = tokens.length; _i < _len; _i++) {
        v = tokens[_i];
        if (v.is_quoted()) {
          list.push(v.value());
        } else {
          list.push(env.get_if_data(v.value(), line));
        }
      }
      return list;
    });

    i_love_u.prototype.dynamic_data = function(name, line) {
      var func;
      func = this.constructor.dynamic_data(name);
      return func(name, this, line);
    };

    i_love_u.prototype.is_name_of_dynamic_data = function(k) {
      return this.constructor.is_name_of_dynamic_data(k);
    };

    i_love_u.prototype.is_name_of_data = function(k) {
      var v, val, _i, _len, _ref;
      if (this.is_name_of_dynamic_data(k)) {
        return true;
      }
      _ref = this._data_;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        if (v.name() === k) {
          val = v;
        }
      }
      return !!val;
    };

    i_love_u.prototype.add_data = function(k, v) {
      return this._data_.push(new Var(k, v));
    };

    i_love_u.prototype.update_data = function(k, new_v) {
      var i, v, val_i, _i, _len, _ref;
      _ref = this._data_;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        v = _ref[i];
        if (v.name() === k) {
          val_i = i;
        }
      }
      if (isNaN(parseInt(val_i))) {
        throw new Error("No data named: " + k);
      }
      if (new_v.is_a_var) {
        return this._data_[val_i] = new_v;
      } else {
        return this._data_[val_i].write("value", new_v);
      }
    };

    i_love_u.prototype.delete_data = function(name) {
      var k, pos, v, _i, _len, _ref;
      if (!this.is_name_of_data(name)) {
        throw new Error("Data does not exist: " + name + ".");
      }
      _ref = this._data_;
      for (k = _i = 0, _len = _ref.length; _i < _len; k = ++_i) {
        v = _ref[k];
        if (v.name() === name) {
          pos = k;
        }
      }
      return this._data_.splice(pos, 1);
    };

    i_love_u.prototype.data = function(k, line) {
      var v, val, vals, _i, _len, _ref;
      if (this.is_name_of_dynamic_data(k)) {
        return this.dynamic_data(k, line);
      } else if (k) {
        _ref = this._data_;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          if (v.name() === k) {
            val = v;
          }
        }
        return val && val.value();
      } else {
        vals = (function() {
          var _j, _len1, _ref1, _results;
          _ref1 = this._data_;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            v = _ref1[_j];
            if (("name" in v) && ("value" in v)) {
              _results.push(v);
            }
          }
          return _results;
        }).call(this);
        vals;

        return this._data_;
      }
    };

    i_love_u.prototype.get_if_data = function(name, line) {
      if (!line) {
        throw new Error("Line is required.");
      }
      if (this.is_name_of_data(name, line)) {
        return this.data(name, line);
      } else {
        return name;
      }
    };

    i_love_u.prototype.record_loop = function(text) {
      this.write('loop_total', this.loop_total() + 1);
      if (this.loop_total() > LOOP_LIMIT) {
        throw new Error("Loop limit exceeded " + LOOP_LIMIT + " using: " + text + ".");
      }
      return this.loop_total();
    };

    i_love_u.prototype.run_tokens = function() {
      var args, is_any_match, is_full_match, line, match, me, partial_match, proc, results, _i, _len, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      line = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args), t = typeof result;
        return t == "object" || t == "function" ? result || child : child;
      })(Line, args, function(){});
      is_full_match = false;
      partial_match = false;
      me = this;
      while (true) {
        is_any_match = false;
        _ref = this.procs();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          proc = _ref[_i];
          while (true) {
            match = proc.run(me, line);
            if (!match) {
              break;
            }
            partial_match = is_any_match = true;
            if (match.is_full_match()) {
              is_full_match = true;
              break;
            }
          }
          if (is_full_match) {
            break;
          }
        }
        if (is_full_match) {
          break;
        }
        if (!is_any_match) {
          break;
        }
      }
      return results = {
        is_match: partial_match,
        is_full_match: is_full_match,
        compiled: line.pair()
      };
    };

    i_love_u.prototype.run = function() {
      var end, i, line, line_and_block, lines, results, _i, _len;
      lines = (new englishy.Englishy(this.code())).to_tokens();
      for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
        line_and_block = lines[i];
        results = this.run_tokens(line_and_block[0], line_and_block[1]);
        if (!results.is_any_match || !results.is_full_match) {
          end = line_and_block[1] ? ":" : ".";
          line = "" + (englishy.Stringy.to_strings(line_and_block[0]).join(" ")) + end;
          if (!results.is_match) {
            throw new Error("No match for: " + line);
          }
          if (!results.is_full_match) {
            throw new Error("No full match: " + line + " => " + (results.compiled[0].join(" ")) + end);
          }
        }
        this.eval_ed().push(results.compiled);
      }
      return true;
    };

    return i_love_u;

  })();

  md_num = new Procedure("!>NUM< !>CHAR< !>NUM<");

  md_num.write('priority', 'high');

  md_num.write('procedure', function(match) {
    var m, n, op;
    m = match.args()[0];
    op = match.args()[1];
    n = match.args()[2];
    switch (op) {
      case '*':
        return parseFloat(m) * parseFloat(n);
      case '/':
        return parseFloat(m) / parseFloat(n);
      default:
        return match.is_a_match(false);
    }
  });

  as_num = new Procedure("!>NUM< !>CHAR< !>NUM<");

  as_num.write('procedure', function(match) {
    var m, n, op;
    m = match.args()[0];
    op = match.args()[1];
    n = match.args()[2];
    switch (op) {
      case '+':
        return parseFloat(m) + parseFloat(n);
      case '-':
        return parseFloat(m) - parseFloat(n);
      default:
        return match.is_a_match(false);
    }
  });

  word_is_word = new Procedure("!>WORD< is: !>ANY<.");

  word_is_word.write('procedure', function(match) {
    var name, val;
    name = _.first(match.args());
    val = _.last(match.args());
    match.env().add_data(name, val);
    return val;
  });

  clone_list = new Procedure("a clone of !>List<");

  clone_list.write("priority", "high");

  clone_list.write('procedure', function(match) {
    var env, list;
    list = _.first(match.args());
    env = match.env();
    return $.extend(true, {}, clone);
  });

  derive_list = new Procedure("a derivative of !>List<");

  derive_list.write("priority", "high");

  derive_list.write("procedure", function(match) {
    var env, list;
    list = _.first(match.args());
    env = match.env();
    return new list();
  });

  update_word = new Procedure("Update !>WORD< to: !>ANY<.");

  update_word.write('procedure', function(match) {
    var name, val;
    name = _.first(match.args());
    val = _.last(match.args());
    match.env().update_data(name, val);
    return val;
  });

  if_true = new Procedure("If !>true_or_false<:");

  if_true.write('procedure', function(match) {
    var ans, luv, raw_val;
    raw_val = match.args()[0];
    if (!is_boolean_string(raw_val)) {
      return match.is_a_match(false);
    }
    ans = boolean_type_cast(raw_val);
    if (ans === true) {
      luv = new i_love_u(match.line().block(), match.env());
      luv.run();
    }
    match.env().scope().push(ans);
    return ans;
  });

  else_false = new Procedure("else:");

  else_false.write('procedure', function(match) {
    var luv;
    if (_.last(match.env().scope()) === false) {
      luv = new i_love_u(match.line().block(), match.env());
      luv.run();
      return false;
    } else {
      return true;
    }
  });

  catch_err = function(msg, func) {
    var err;
    err = null;
    try {
      func();
    } catch (e) {
      err = e;
    }
    if (!err) {
      return true;
    }
    if (err.message.indexOf(msg) > -1) {
      return false;
    } else {
      throw err;
    }
  };

  run_comparison_on_match = function(op, r, l, match) {
    var known_type, val;
    val = null;
    known_type = catch_err("Can't convert value into type for comparison", function() {
      return val = compare(op, r, l);
    });
    if (known_type) {
      return val;
    } else {
      return match.is_a_match(false);
    }
  };

  not_equals = new Procedure("!>ANY< not equal to !>ANY<");

  not_equals.write('priority', 'last');

  not_equals.write('procedure', function(match) {
    var l, r;
    r = match.args()[0];
    l = match.args()[1];
    return run_comparison_on_match("!==", r, l, match);
  });

  equals = new Procedure("!>ANY< equals !>ANY<");

  equals.write('priority', 'last');

  equals.write('procedure', function(match) {
    var l, r;
    r = match.args()[0];
    l = match.args()[1];
    return run_comparison_on_match("===", r, l, match);
  });

  _do_ = new Procedure("Do:");

  _do_.write('procedure', function(match) {
    var block, env, luv;
    block = match.line().block();
    env = match.env();
    luv = new i_love_u(block, env);
    luv.run();
    match.env().scope().push({
      from_do: true,
      block: block
    });
    return true;
  });

  while_loop = new Procedure("While !>true_or_false<.");

  while_loop.write('procedure', function(match) {
    var ans, block, env, prev;
    env = match.env();
    prev = _.last(env.scope());
    ans = match.args()[0];
    block = prev && prev.from_do ? prev.block : match.line().block();
    if (!block) {
      return match.is_a_match(false);
    }
    if (ans) {
      env.record_loop(match.line().origin_line_text());
      (new i_love_u(block, env)).run();
      env.run_tokens(match.line().origin_line(), block);
    }
    env.scope().push(ans);
    return ans;
  });

  a_new_noun = new Procedure("a new !>WORD<");

  a_new_noun.write('procedure', function(match) {
    var env, noun, noun_name;
    env = match.env();
    noun_name = match.args()[0];
    if (!env.is_name_of_data(noun_name)) {
      return match.is_a_match(false);
    } else {
      noun = env.data(noun_name);
      return cloneextend.clone(noun);
    }
  });

  insert_into_list = new Procedure("Insert at the !>WORD< of !>Noun<: !>ANY<.");

  insert_into_list.write('procedure', function(match) {
    var env, list, pos, val;
    env = match.env();
    pos = match.args()[0];
    list = match.args()[1];
    val = match.args()[2];
    if (!list.insert || !(pos === 'top' || pos === 'bottom')) {
      return match.is_a_match(false);
    } else {
      return list.insert(pos, val);
    }
  });

  top_bottom = new Procedure("!>Noun<, from top to bottom as !>WORD<:");

  top_bottom.write('procedure', function(match) {
    var block, env, noun, pos, pos_name;
    noun = match.args()[0];
    pos_name = match.args()[1];
    block = match.line().block();
    env = match.env();
    pos = noun.target().position();
    env.add_data(pos_name, pos);
    if (pos.is_at_bottom()) {
      return false;
    }
    while (true) {
      (new i_love_u(block, env)).run();
      if (pos.is_at_bottom()) {
        break;
      }
      pos.downward();
    }
    return true;
  });

  i_love_u.add_base_proc(if_true);

  i_love_u.add_base_proc(else_false);

  i_love_u.add_base_proc(as_num);

  i_love_u.add_base_proc(md_num);

  i_love_u.add_base_proc(word_is_word);

  i_love_u.add_base_proc(update_word);

  i_love_u.add_base_proc(clone_list);

  i_love_u.add_base_proc(derive_list);

  i_love_u.add_base_proc(not_equals);

  i_love_u.add_base_proc(equals);

  i_love_u.add_base_proc(while_loop);

  i_love_u.add_base_proc(_do_);

  i_love_u.add_base_proc(a_new_noun);

  i_love_u.add_base_proc(insert_into_list);

  i_love_u.add_base_proc(top_bottom);

  list_noun = {
    is_a_noun: function() {
      return true;
    },
    target: function() {
      var _ref;
      return (_ref = this._target_) != null ? _ref : this._target_ = new humane_list();
    },
    insert: function(raw_pos, val) {
      var pos;
      pos = raw_pos === "top" ? "front" : "end";
      return this.target().push(pos, val);
    },
    values: function() {
      return this.target().values();
    }
  };

  i_love_u.add_base_data("List", list_noun);

}).call(this);
