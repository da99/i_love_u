// Generated by CoffeeScript 1.3.3
(function() {
  var Procedure, Property_ize, englishy, i_love_u, parser,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  parser = require('englishy');

  englishy = require('englishy');

  Property_ize = function(proto) {
    var m, me, _i, _len, _ref, _results;
    me = arguments.callee;
    if (!me.read_able) {
      me.read_able = function() {
        var args, prop, _i, _len, _results;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        _results = [];
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          prop = args[_i];
          this[prop] = function() {
            return this.d[arguments.callee.prop_name];
          };
          _results.push(this[prop].prop_name = prop);
        }
        return _results;
      };
      me.write_able = function() {
        var args, prop, _base, _i, _len, _ref, _ref1, _results;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        _results = [];
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          prop = args[_i];
          if ((_ref = this.d) == null) {
            this.d = {};
          }
          if ((_ref1 = (_base = this.d)['writers']) == null) {
            _base['writers'] = [];
          }
          _results.push(this.d['writers'].push(prop));
        }
        return _results;
      };
      me.write = function(prop, val) {
        if (!(__indexOf.call(this.d['writers'], prop) >= 0)) {
          throw new Error("" + prop + " is not allowed to be updated.");
        }
        return this.d[prop] = val;
      };
      me.read_write_able = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this.read_able.apply(this, args);
        return this.write_able.apply(this, args);
      };
      me.methods = "read_able write_able write read_write_able".split(/\s+/);
    }
    _ref = me.methods;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      _results.push(proto[m] = me[m]);
    }
    return _results;
  };

  exports.i_love_u = i_love_u = (function() {

    i_love_u.No_Match = "no_match";

    i_love_u.Base_Procs = [];

    Property_ize(i_love_u.prototype);

    function i_love_u(str) {
      this.d = {};
      this.d.original_code = str;
      this.read_write_able('address', 'pattern', 'stack', 'procs', 'data');
      this.read_able('code', 'original_code');
      this.d.original_code = str;
      this.d.code = str.englishy('standardize');
      this.d.procs = this.Base_Procs + [];
      this.d.stack = [];
    }

    i_love_u.prototype.parse = function() {
      return this.d.tree = new englishy.Englishy(this.code());
    };

    return i_love_u;

  })();

  exports.Procedure = Procedure = (function() {

    function Procedure(pattern) {
      this.read_write_able('pattern', 'regexp', 'data', 'stack', 'procedure');
    }

    return Procedure;

  })();

}).call(this);
