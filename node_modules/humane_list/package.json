{
  "name": "humane_list",
  "version": "0.2.0",
  "description": "A combination of array and kv structure.",
  "main": "lib/index.js",
  "scripts": {
    "test": "mocha  --watch --compilers coffee:coffee-script"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/da99/humane_list"
  },
  "author": {
    "name": "da99"
  },
  "license": "BSD",
  "readme": "\nhumane\\_list\n============\n\nCombining arrays with kv structures.  It is meant to act the \nway non-programmers (ie humans) expect lists to act (ie usability).\n\n* Default index is 1, not 0.\n* This is no `shift` or `unshift`.\n* `.pop( 'front' )` and `.push('front', vals)` to attach before first element. \n* `.pop( 'end'  )`  and `.push('end',  vals)` to pop/insert after last element.\n* `.front()` and `.end()` instead of `.first()` and `.last()`\n  * Why design it this way? Because index positions can be -1, -2.1, etc. \n    Non-programmers would assume `.first()` returned value at index 1, instead of -1.\n* Instead of index, you have positions. \n  * Why?! Because non-programmers might confuse keys with indexes.  Think of a \n    book with an index.\n\nInstallation and Usage\n=====\n\nOn your shell:\n\n    npm install humane_list\n\nIn your script:\n\n    var hl = require('humane_list');\n    var empty   = new hl.Humane_List();\n    var w_array = new hl.Humane_List( [1,2,3] );\n    var w_obj   = new hl.Humane_List( { one: 1, two: 2, three: 3 } );\n\n\nUsage: Inserting\n=====\n\n    stuff.push( \"end\", \"red\" );\n    stuff.push( \"end\", \"blue\" );\n    stuff.end(); \n    // => \"blue\"\n    \nRemember, index starts with 1, not 0.\n\n    stuff.alias( 1, \"favorite\" );\n    stuff.alias( \"favorite\", \"fire_color\" );\n    stuff.at_key( \"favorite\" );\n    // => \"red\"\n    \n    stuff.at_key( \"fire_color\" );\n    // => \"red\"\n\nUsage: Inspect\n================\n\n    stuff.has_key( \"favorite\" );\n    // => true\n\n    stuff.positions();\n    // => [ 1, 2 ]\n\n    stuff.keys();\n    // => [ ['favorite', 'fire_color'], [] ]\n    \n    stuff.values();\n    // => [ 'red', 'blue' ]\n\n\nUsage: Deleting\n=============\n\n    stuff.delete_at( \"fire_color\");\n    stuff.delete_at( 2 ); \n    // This deletes value at index 2.\n\nNo shift or unshift.\n\n    stuff.pop('front');\n    // => \"red\"\n    \n    stuff.push( 'front', \"red\" );\n    // => \"red\"\n    \n\n\n\n\n",
  "_id": "humane_list@0.2.0",
  "_from": "humane_list@*"
}
